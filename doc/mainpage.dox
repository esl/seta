/*!

\mainpage Main Page

\section what What is Seta
Seta is a work-stealing scheduler for multithreaded parallel programming that achieves space, time and communication bounds all within a constant factor of optimal.
Seta is also a programming environment, which is a set of library functions available to the user plus a set of rules imposing how the user needs to structure his program in order to make it runnable by the scheduler.\n
Finally Seta is an evaluator for the scheduler. It is able to measure the memory allocated at any step by the scheduler so as to prove the constraints imposed by the theory which Seta is based on, and can further produces a nice graph representing the execution of the computation and an important property of the computation itself.\n

\section why Why Seta is interesting
Nowadays an increasingly number of concurrent and parallel applications requires to be executed on multithreaded systems. While most of the schedulers of this multithreaded systems seems to perform well in practice, none provide users with a guarantee about performance. Diversely the presented scheduler is provably efficient also in theory. Regarding the memory allocation, the theory which Seta is based on[1] provably states that the Seta's scheduler guarantees the following upper bound: the maximum total memory allocated on N processors executing a "fully strict" computation is guaranteed to be bounded by T1*N, where T1 is the minimum allocation space needed in an 1-thread execution of the computation.




\n\n\n\n
[1] Robert D. Blumofe, Christopher F.Joerg, Brandley C. Kuszmaul, Charles E. Leiserson, Keith H.Randall, Yuli Zhou. Cilk: an efficient multithreaded runtime system.
*/